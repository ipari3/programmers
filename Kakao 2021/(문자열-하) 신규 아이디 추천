# https://programmers.co.kr/learn/courses/30/lessons/72410

import re


def solution(new_id):
    result = new_id.lower()
    result = re.sub("[^a-z0-9-_.]", "", result)
    result = re.sub("[.]{2,}", ".", result)
    result = result.strip(".")
    
    if result == "":
        result = "a"
    
    id_length = len(result)
    if id_length > 15:
        result = result[:15].rstrip(".")    
    elif id_length < 3:
        lack = 3 - id_length
        result += result[-1] * lack
        
    return result
    
"""
문제 유형은 시뮬레이션이며, 문자열을 조작하는 법을 배울 수 있다.
[문자열 내장 함수]
- s.lower() 등의 문자열 내장 함수를 알고 우선적으로 쓰는 것이 좋다.
- strip(ch)은 양끝의 문자 ch를 제거하며, ch가 연속으로 있으면 모두 제거한다.
  lsrtip과 rstrip은 각각 왼쪽과 오른쪽 끝만 제거한다.
  
[정규표현식]
정규표현식은 일반적으로 느리다는게 단점이지만,
이 문제에서는 입력의 크기나 제약사항 등을 고려할 때 속도에 대해 신경쓰지 않아도 된다.
따라서 코드도 간략하고 생산성이 좋은 정규표현식을 사용하는 것이 옳다.
- re.sub은 3개의 파라미터를 가지며, 각 문자를 문자열로 바꾼다.
  첫 번째는 정규식의 자리인데, 문자열임을 나타내는 작은따옴표나 큰따옴표로 묶어서 사용한다.
  두 번째는 문자 하나만 되는 것이 아니라 문자열이 가능하다.
- 정규식 "[a-z0-9-_.]"은 소문자, 숫자, -, _, .의 문자들 중 하나를 의미한다.
  앞에 ^를 붙인 "[^a-z0-9-_.]"은 ^ 뒤의 모든 문자들 외의 문자를 의미한다.
- 정규식 "[.]{2,}"은 "."이 2개 이상인 경우를 의미한다.

[기타]
- 빈 문자열임을 판단할 때, if not result: 보다는
  if result == "": 처럼 쓰는게 가독성이 좋은 것 같다.
- 추천 아이디를 담을 변수명을 recommended_id로 지어봤지만 가독성이 좋지 않았다.
  오히려 result나 answer가 코드를 읽기에 더 좋았다.
  알고리즘 문제에서는 변수들의 scope가 넓지 않으므로 단어 하나 정도로 나타내는 것이 적절해 보인다.
- result[:15]는 앞에서부터 총 15자라고 읽을 수 있다.
"""
